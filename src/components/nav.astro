---
type NavItem = {
    text: string;
    href: string;
    tooltip?: string;
    class?: string;
};
const navItems: NavItem[] = [
    {
        text: "Campaign demos",
        href: "/campaigns",
        tooltip: "Some demos of campaign pages",
    },
    {
        text: "Donation demos",
        href: "/donations",
        tooltip: "Some demos of donation pages",
    },
];
---

<nav class="nav-container">
    <button class="menu-button button m-0" aria-label="Open menu">Menu</button>

    <div class="nav-links">
        {
            navItems.map(({ text, href, tooltip, class: className }) => (
                <a href={href} title={tooltip} class={className}>
                    {text}
                </a>
            ))
        }
    </div>
</nav>
<script>
    const NAV_SELECTORS = {
        container: ".nav-container",
        links: ".nav-links",
        menuButton: "button.menu-button",
    } as const;

    // Elements that should become inert when nav is open
    const INERT_WITH_NAV_ATTR = "data-inert-with-nav";

    const handleEscapeKey = (event: KeyboardEvent) => {
        if (event.key === "Escape") {
            setDrawerOpen(false);
        }
    };

    const handleClickOutside = (event: MouseEvent) => {
        const navContainer = document.querySelector(NAV_SELECTORS.container);
        const menuButton = document.querySelector(NAV_SELECTORS.menuButton);

        if (
            navContainer &&
            !navContainer.contains(event.target as Node) &&
            menuButton !== event.target
        ) {
            setDrawerOpen(false);
        }
    };

    const setDrawerOpen = (isOpen: boolean) => {
        const navLinks = document.querySelector(NAV_SELECTORS.links);
        const navContainer = document.querySelector(NAV_SELECTORS.container);
        const menuButton = document.querySelector(
            NAV_SELECTORS.menuButton,
        ) as HTMLButtonElement;

        // All elements that should be inert when nav is open
        const inertElements = document.querySelectorAll<HTMLElement>(
            `[${INERT_WITH_NAV_ATTR}]`,
        );

        if (!navLinks || !menuButton) return;

        // Update drawer state
        navLinks.classList.toggle("active", isOpen);
        navContainer?.classList.toggle("drawer-active", isOpen);

        // Update menu button
        menuButton.setAttribute(
            "aria-label",
            isOpen ? "Close menu" : "Open menu",
        );
        menuButton.innerText = isOpen ? "Close" : "Menu";

        // Toggle inert state on elements
        inertElements.forEach((el) => {
            if (isOpen) {
                el.setAttribute("inert", "");
                el.style.filter = "blur(3px)"; // Add blur effect
            } else {
                el.removeAttribute("inert");
                el.style.filter = "none"; // Remove blur effect
            }
        });

        // Toggle body scroll
        document.body.style.overflow = isOpen ? "hidden" : "";

        // Toggle event listeners
        if (isOpen) {
            window.addEventListener("keydown", handleEscapeKey);
            document.body.addEventListener("click", handleClickOutside, true);
        } else {
            window.removeEventListener("keydown", handleEscapeKey);
            document.body.removeEventListener(
                "click",
                handleClickOutside,
                true,
            );
        }
    };

    // Initialize menu button click handler
    document
        .querySelector(NAV_SELECTORS.menuButton)
        ?.addEventListener("click", () => {
            const navLinks = document.querySelector(NAV_SELECTORS.links);
            const isCurrentlyOpen = navLinks?.classList.contains("active");
            setDrawerOpen(!isCurrentlyOpen);
        });
</script>
<style>
    .nav-container {
        position: relative;
        padding: 1rem 0;
    }

    .nav-links {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
    }

    .nav-links a:not(.button) {
        color: #191919;
        text-decoration: none;
        font-weight: 700;
    }

    .nav-links a:not(.button):hover {
        text-decoration: underline;
    }

    .menu-button {
        display: none;
        cursor: pointer;
    }

    @media (max-width: 640px) {

        .menu-button {
            display: block;
            position: relative;
            z-index: 20;
        }

        .nav-links {
            position: fixed;
            top: 0;
            right: -66.666%; /* Start off-screen */
            width: 66.666%; /* Two-thirds of the screen */
            height: 100vh;
            background-color: white;
            padding: 4rem 2rem 2rem;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 1.5rem;
            transition: right 0.3s ease-in-out;
            z-index: 10;
            box-shadow: -4px 0 8px rgba(0, 0, 0, 0.1);
        }

        .nav-container.drawer-active .nav-links {
            right: 0; /* Slide in */
        }

        .nav-links.active {
            display: flex;
        }
    }
</style>
